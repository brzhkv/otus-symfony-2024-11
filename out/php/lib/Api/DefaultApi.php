<?php
/**
 * DefaultApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My App
 *
 * This is an awesome app!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteAppWebDeleteuserV1Invoke' => [
            'application/json',
        ],
        'getAppWebGetjsonschemaV1Invoke' => [
            'application/json',
        ],
        'getAppWebGettweetV1Invoke' => [
            'application/json',
        ],
        'getAppWebGetuserV1Invoke' => [
            'application/json',
        ],
        'getAppWebGetusersbyloginV1Getuserbylogin' => [
            'application/json',
        ],
        'getAppWebGetusersbyqueryV1Invoke' => [
            'application/json',
        ],
        'getAppWebPhoneuserformV1CreateManageuser' => [
            'application/json',
        ],
        'getAppWebPhoneuserformV1EditManageuser' => [
            'application/json',
        ],
        'getAppWebRenderuserlistV1Invoke' => [
            'application/json',
        ],
        'getAppWebUserformV1CreateManageuser' => [
            'application/json',
        ],
        'getAppWebUserformV1EditManageuser' => [
            'application/json',
        ],
        'patchAppWebPhoneuserformV1EditManageuser' => [
            'application/json',
        ],
        'patchAppWebUpdateuserloginV1Invoke' => [
            'application/json',
        ],
        'patchAppWebUserformV1EditManageuser' => [
            'application/json',
        ],
        'postAppWebAddfollowersV1Invoke' => [
            'application/json',
        ],
        'postAppWebCreatesubscriptionV1Invoke' => [
            'application/json',
        ],
        'postAppWebCreateuserV1Invoke' => [
            'application/json',
        ],
        'postAppWebCreateuserV2Invoke' => [
            'application/json',
        ],
        'postAppWebGettokenV1Invoke' => [
            'application/json',
        ],
        'postAppWebPhoneuserformV1CreateManageuser' => [
            'application/json',
        ],
        'postAppWebPosttweetV1Invoke' => [
            'application/json',
        ],
        'postAppWebRefreshtokenV1Invoke' => [
            'application/json',
        ],
        'postAppWebUpdateuseravatarlinkV1Getuserbylogin' => [
            'application/json',
        ],
        'postAppWebUserformV1CreateManageuser' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteAppWebDeleteuserV1Invoke
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAppWebDeleteuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAppWebDeleteuserV1Invoke($id, string $contentType = self::contentTypes['deleteAppWebDeleteuserV1Invoke'][0])
    {
        $this->deleteAppWebDeleteuserV1InvokeWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteAppWebDeleteuserV1InvokeWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAppWebDeleteuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAppWebDeleteuserV1InvokeWithHttpInfo($id, string $contentType = self::contentTypes['deleteAppWebDeleteuserV1Invoke'][0])
    {
        $request = $this->deleteAppWebDeleteuserV1InvokeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAppWebDeleteuserV1InvokeAsync
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAppWebDeleteuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAppWebDeleteuserV1InvokeAsync($id, string $contentType = self::contentTypes['deleteAppWebDeleteuserV1Invoke'][0])
    {
        return $this->deleteAppWebDeleteuserV1InvokeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAppWebDeleteuserV1InvokeAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAppWebDeleteuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAppWebDeleteuserV1InvokeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteAppWebDeleteuserV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->deleteAppWebDeleteuserV1InvokeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAppWebDeleteuserV1Invoke'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAppWebDeleteuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAppWebDeleteuserV1InvokeRequest($id, string $contentType = self::contentTypes['deleteAppWebDeleteuserV1Invoke'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAppWebDeleteuserV1Invoke'
            );
        }
        if (!preg_match("/\\d+/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling DefaultApi.deleteAppWebDeleteuserV1Invoke, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/api/v1/user/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppWebGetjsonschemaV1Invoke
     *
     * @param  string $resource resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetjsonschemaV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAppWebGetjsonschemaV1Invoke($resource, string $contentType = self::contentTypes['getAppWebGetjsonschemaV1Invoke'][0])
    {
        $this->getAppWebGetjsonschemaV1InvokeWithHttpInfo($resource, $contentType);
    }

    /**
     * Operation getAppWebGetjsonschemaV1InvokeWithHttpInfo
     *
     * @param  string $resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetjsonschemaV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppWebGetjsonschemaV1InvokeWithHttpInfo($resource, string $contentType = self::contentTypes['getAppWebGetjsonschemaV1Invoke'][0])
    {
        $request = $this->getAppWebGetjsonschemaV1InvokeRequest($resource, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAppWebGetjsonschemaV1InvokeAsync
     *
     * @param  string $resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetjsonschemaV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebGetjsonschemaV1InvokeAsync($resource, string $contentType = self::contentTypes['getAppWebGetjsonschemaV1Invoke'][0])
    {
        return $this->getAppWebGetjsonschemaV1InvokeAsyncWithHttpInfo($resource, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAppWebGetjsonschemaV1InvokeAsyncWithHttpInfo
     *
     * @param  string $resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetjsonschemaV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebGetjsonschemaV1InvokeAsyncWithHttpInfo($resource, string $contentType = self::contentTypes['getAppWebGetjsonschemaV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->getAppWebGetjsonschemaV1InvokeRequest($resource, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAppWebGetjsonschemaV1Invoke'
     *
     * @param  string $resource (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetjsonschemaV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAppWebGetjsonschemaV1InvokeRequest($resource, string $contentType = self::contentTypes['getAppWebGetjsonschemaV1Invoke'][0])
    {

        // verify the required parameter 'resource' is set
        if ($resource === null || (is_array($resource) && count($resource) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resource when calling getAppWebGetjsonschemaV1Invoke'
            );
        }


        $resourcePath = '/api/v1/get-json-schema/{resource}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($resource !== null) {
            $resourcePath = str_replace(
                '{' . 'resource' . '}',
                ObjectSerializer::toPathValue($resource),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppWebGettweetV1Invoke
     *
     * @param  int $page page (required)
     * @param  int $per_page per_page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGettweetV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAppWebGettweetV1Invoke($page, $per_page, string $contentType = self::contentTypes['getAppWebGettweetV1Invoke'][0])
    {
        $this->getAppWebGettweetV1InvokeWithHttpInfo($page, $per_page, $contentType);
    }

    /**
     * Operation getAppWebGettweetV1InvokeWithHttpInfo
     *
     * @param  int $page (required)
     * @param  int $per_page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGettweetV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppWebGettweetV1InvokeWithHttpInfo($page, $per_page, string $contentType = self::contentTypes['getAppWebGettweetV1Invoke'][0])
    {
        $request = $this->getAppWebGettweetV1InvokeRequest($page, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAppWebGettweetV1InvokeAsync
     *
     * @param  int $page (required)
     * @param  int $per_page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGettweetV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebGettweetV1InvokeAsync($page, $per_page, string $contentType = self::contentTypes['getAppWebGettweetV1Invoke'][0])
    {
        return $this->getAppWebGettweetV1InvokeAsyncWithHttpInfo($page, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAppWebGettweetV1InvokeAsyncWithHttpInfo
     *
     * @param  int $page (required)
     * @param  int $per_page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGettweetV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebGettweetV1InvokeAsyncWithHttpInfo($page, $per_page, string $contentType = self::contentTypes['getAppWebGettweetV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->getAppWebGettweetV1InvokeRequest($page, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAppWebGettweetV1Invoke'
     *
     * @param  int $page (required)
     * @param  int $per_page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGettweetV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAppWebGettweetV1InvokeRequest($page, $per_page, string $contentType = self::contentTypes['getAppWebGettweetV1Invoke'][0])
    {

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getAppWebGettweetV1Invoke'
            );
        }

        // verify the required parameter 'per_page' is set
        if ($per_page === null || (is_array($per_page) && count($per_page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $per_page when calling getAppWebGettweetV1Invoke'
            );
        }


        $resourcePath = '/api/v1/get-tweet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppWebGetuserV1Invoke
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAppWebGetuserV1Invoke(string $contentType = self::contentTypes['getAppWebGetuserV1Invoke'][0])
    {
        $this->getAppWebGetuserV1InvokeWithHttpInfo($contentType);
    }

    /**
     * Operation getAppWebGetuserV1InvokeWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppWebGetuserV1InvokeWithHttpInfo(string $contentType = self::contentTypes['getAppWebGetuserV1Invoke'][0])
    {
        $request = $this->getAppWebGetuserV1InvokeRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAppWebGetuserV1InvokeAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebGetuserV1InvokeAsync(string $contentType = self::contentTypes['getAppWebGetuserV1Invoke'][0])
    {
        return $this->getAppWebGetuserV1InvokeAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAppWebGetuserV1InvokeAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebGetuserV1InvokeAsyncWithHttpInfo(string $contentType = self::contentTypes['getAppWebGetuserV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->getAppWebGetuserV1InvokeRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAppWebGetuserV1Invoke'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAppWebGetuserV1InvokeRequest(string $contentType = self::contentTypes['getAppWebGetuserV1Invoke'][0])
    {


        $resourcePath = '/api/v1/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppWebGetusersbyloginV1Getuserbylogin
     *
     * @param  string $login login (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetusersbyloginV1Getuserbylogin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAppWebGetusersbyloginV1Getuserbylogin($login, string $contentType = self::contentTypes['getAppWebGetusersbyloginV1Getuserbylogin'][0])
    {
        $this->getAppWebGetusersbyloginV1GetuserbyloginWithHttpInfo($login, $contentType);
    }

    /**
     * Operation getAppWebGetusersbyloginV1GetuserbyloginWithHttpInfo
     *
     * @param  string $login (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetusersbyloginV1Getuserbylogin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppWebGetusersbyloginV1GetuserbyloginWithHttpInfo($login, string $contentType = self::contentTypes['getAppWebGetusersbyloginV1Getuserbylogin'][0])
    {
        $request = $this->getAppWebGetusersbyloginV1GetuserbyloginRequest($login, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAppWebGetusersbyloginV1GetuserbyloginAsync
     *
     * @param  string $login (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetusersbyloginV1Getuserbylogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebGetusersbyloginV1GetuserbyloginAsync($login, string $contentType = self::contentTypes['getAppWebGetusersbyloginV1Getuserbylogin'][0])
    {
        return $this->getAppWebGetusersbyloginV1GetuserbyloginAsyncWithHttpInfo($login, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAppWebGetusersbyloginV1GetuserbyloginAsyncWithHttpInfo
     *
     * @param  string $login (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetusersbyloginV1Getuserbylogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebGetusersbyloginV1GetuserbyloginAsyncWithHttpInfo($login, string $contentType = self::contentTypes['getAppWebGetusersbyloginV1Getuserbylogin'][0])
    {
        $returnType = '';
        $request = $this->getAppWebGetusersbyloginV1GetuserbyloginRequest($login, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAppWebGetusersbyloginV1Getuserbylogin'
     *
     * @param  string $login (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetusersbyloginV1Getuserbylogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAppWebGetusersbyloginV1GetuserbyloginRequest($login, string $contentType = self::contentTypes['getAppWebGetusersbyloginV1Getuserbylogin'][0])
    {

        // verify the required parameter 'login' is set
        if ($login === null || (is_array($login) && count($login) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login when calling getAppWebGetusersbyloginV1Getuserbylogin'
            );
        }


        $resourcePath = '/api/v1/get-user-by-login/{login}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($login !== null) {
            $resourcePath = str_replace(
                '{' . 'login' . '}',
                ObjectSerializer::toPathValue($login),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppWebGetusersbyqueryV1Invoke
     *
     * @param  string $query query (required)
     * @param  int $per_page per_page (required)
     * @param  int $page page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetusersbyqueryV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAppWebGetusersbyqueryV1Invoke($query, $per_page, $page, string $contentType = self::contentTypes['getAppWebGetusersbyqueryV1Invoke'][0])
    {
        $this->getAppWebGetusersbyqueryV1InvokeWithHttpInfo($query, $per_page, $page, $contentType);
    }

    /**
     * Operation getAppWebGetusersbyqueryV1InvokeWithHttpInfo
     *
     * @param  string $query (required)
     * @param  int $per_page (required)
     * @param  int $page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetusersbyqueryV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppWebGetusersbyqueryV1InvokeWithHttpInfo($query, $per_page, $page, string $contentType = self::contentTypes['getAppWebGetusersbyqueryV1Invoke'][0])
    {
        $request = $this->getAppWebGetusersbyqueryV1InvokeRequest($query, $per_page, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAppWebGetusersbyqueryV1InvokeAsync
     *
     * @param  string $query (required)
     * @param  int $per_page (required)
     * @param  int $page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetusersbyqueryV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebGetusersbyqueryV1InvokeAsync($query, $per_page, $page, string $contentType = self::contentTypes['getAppWebGetusersbyqueryV1Invoke'][0])
    {
        return $this->getAppWebGetusersbyqueryV1InvokeAsyncWithHttpInfo($query, $per_page, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAppWebGetusersbyqueryV1InvokeAsyncWithHttpInfo
     *
     * @param  string $query (required)
     * @param  int $per_page (required)
     * @param  int $page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetusersbyqueryV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebGetusersbyqueryV1InvokeAsyncWithHttpInfo($query, $per_page, $page, string $contentType = self::contentTypes['getAppWebGetusersbyqueryV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->getAppWebGetusersbyqueryV1InvokeRequest($query, $per_page, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAppWebGetusersbyqueryV1Invoke'
     *
     * @param  string $query (required)
     * @param  int $per_page (required)
     * @param  int $page (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebGetusersbyqueryV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAppWebGetusersbyqueryV1InvokeRequest($query, $per_page, $page, string $contentType = self::contentTypes['getAppWebGetusersbyqueryV1Invoke'][0])
    {

        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling getAppWebGetusersbyqueryV1Invoke'
            );
        }

        // verify the required parameter 'per_page' is set
        if ($per_page === null || (is_array($per_page) && count($per_page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $per_page when calling getAppWebGetusersbyqueryV1Invoke'
            );
        }

        // verify the required parameter 'page' is set
        if ($page === null || (is_array($page) && count($page) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page when calling getAppWebGetusersbyqueryV1Invoke'
            );
        }


        $resourcePath = '/api/v1/get-users-by-query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'perPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppWebPhoneuserformV1CreateManageuser
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebPhoneuserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAppWebPhoneuserformV1CreateManageuser(string $contentType = self::contentTypes['getAppWebPhoneuserformV1CreateManageuser'][0])
    {
        $this->getAppWebPhoneuserformV1CreateManageuserWithHttpInfo($contentType);
    }

    /**
     * Operation getAppWebPhoneuserformV1CreateManageuserWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebPhoneuserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppWebPhoneuserformV1CreateManageuserWithHttpInfo(string $contentType = self::contentTypes['getAppWebPhoneuserformV1CreateManageuser'][0])
    {
        $request = $this->getAppWebPhoneuserformV1CreateManageuserRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAppWebPhoneuserformV1CreateManageuserAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebPhoneuserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebPhoneuserformV1CreateManageuserAsync(string $contentType = self::contentTypes['getAppWebPhoneuserformV1CreateManageuser'][0])
    {
        return $this->getAppWebPhoneuserformV1CreateManageuserAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAppWebPhoneuserformV1CreateManageuserAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebPhoneuserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebPhoneuserformV1CreateManageuserAsyncWithHttpInfo(string $contentType = self::contentTypes['getAppWebPhoneuserformV1CreateManageuser'][0])
    {
        $returnType = '';
        $request = $this->getAppWebPhoneuserformV1CreateManageuserRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAppWebPhoneuserformV1CreateManageuser'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebPhoneuserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAppWebPhoneuserformV1CreateManageuserRequest(string $contentType = self::contentTypes['getAppWebPhoneuserformV1CreateManageuser'][0])
    {


        $resourcePath = '/api/v1/create-phone-user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppWebPhoneuserformV1EditManageuser
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebPhoneuserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAppWebPhoneuserformV1EditManageuser($id, string $contentType = self::contentTypes['getAppWebPhoneuserformV1EditManageuser'][0])
    {
        $this->getAppWebPhoneuserformV1EditManageuserWithHttpInfo($id, $contentType);
    }

    /**
     * Operation getAppWebPhoneuserformV1EditManageuserWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebPhoneuserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppWebPhoneuserformV1EditManageuserWithHttpInfo($id, string $contentType = self::contentTypes['getAppWebPhoneuserformV1EditManageuser'][0])
    {
        $request = $this->getAppWebPhoneuserformV1EditManageuserRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAppWebPhoneuserformV1EditManageuserAsync
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebPhoneuserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebPhoneuserformV1EditManageuserAsync($id, string $contentType = self::contentTypes['getAppWebPhoneuserformV1EditManageuser'][0])
    {
        return $this->getAppWebPhoneuserformV1EditManageuserAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAppWebPhoneuserformV1EditManageuserAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebPhoneuserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebPhoneuserformV1EditManageuserAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getAppWebPhoneuserformV1EditManageuser'][0])
    {
        $returnType = '';
        $request = $this->getAppWebPhoneuserformV1EditManageuserRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAppWebPhoneuserformV1EditManageuser'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebPhoneuserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAppWebPhoneuserformV1EditManageuserRequest($id, string $contentType = self::contentTypes['getAppWebPhoneuserformV1EditManageuser'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAppWebPhoneuserformV1EditManageuser'
            );
        }


        $resourcePath = '/api/v1/update-phone-user/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppWebRenderuserlistV1Invoke
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebRenderuserlistV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAppWebRenderuserlistV1Invoke(string $contentType = self::contentTypes['getAppWebRenderuserlistV1Invoke'][0])
    {
        $this->getAppWebRenderuserlistV1InvokeWithHttpInfo($contentType);
    }

    /**
     * Operation getAppWebRenderuserlistV1InvokeWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebRenderuserlistV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppWebRenderuserlistV1InvokeWithHttpInfo(string $contentType = self::contentTypes['getAppWebRenderuserlistV1Invoke'][0])
    {
        $request = $this->getAppWebRenderuserlistV1InvokeRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAppWebRenderuserlistV1InvokeAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebRenderuserlistV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebRenderuserlistV1InvokeAsync(string $contentType = self::contentTypes['getAppWebRenderuserlistV1Invoke'][0])
    {
        return $this->getAppWebRenderuserlistV1InvokeAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAppWebRenderuserlistV1InvokeAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebRenderuserlistV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebRenderuserlistV1InvokeAsyncWithHttpInfo(string $contentType = self::contentTypes['getAppWebRenderuserlistV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->getAppWebRenderuserlistV1InvokeRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAppWebRenderuserlistV1Invoke'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebRenderuserlistV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAppWebRenderuserlistV1InvokeRequest(string $contentType = self::contentTypes['getAppWebRenderuserlistV1Invoke'][0])
    {


        $resourcePath = '/api/v1/get-user-list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppWebUserformV1CreateManageuser
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebUserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAppWebUserformV1CreateManageuser(string $contentType = self::contentTypes['getAppWebUserformV1CreateManageuser'][0])
    {
        $this->getAppWebUserformV1CreateManageuserWithHttpInfo($contentType);
    }

    /**
     * Operation getAppWebUserformV1CreateManageuserWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebUserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppWebUserformV1CreateManageuserWithHttpInfo(string $contentType = self::contentTypes['getAppWebUserformV1CreateManageuser'][0])
    {
        $request = $this->getAppWebUserformV1CreateManageuserRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAppWebUserformV1CreateManageuserAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebUserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebUserformV1CreateManageuserAsync(string $contentType = self::contentTypes['getAppWebUserformV1CreateManageuser'][0])
    {
        return $this->getAppWebUserformV1CreateManageuserAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAppWebUserformV1CreateManageuserAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebUserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebUserformV1CreateManageuserAsyncWithHttpInfo(string $contentType = self::contentTypes['getAppWebUserformV1CreateManageuser'][0])
    {
        $returnType = '';
        $request = $this->getAppWebUserformV1CreateManageuserRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAppWebUserformV1CreateManageuser'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebUserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAppWebUserformV1CreateManageuserRequest(string $contentType = self::contentTypes['getAppWebUserformV1CreateManageuser'][0])
    {


        $resourcePath = '/api/v1/create-user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAppWebUserformV1EditManageuser
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebUserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAppWebUserformV1EditManageuser($id, string $contentType = self::contentTypes['getAppWebUserformV1EditManageuser'][0])
    {
        $this->getAppWebUserformV1EditManageuserWithHttpInfo($id, $contentType);
    }

    /**
     * Operation getAppWebUserformV1EditManageuserWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebUserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAppWebUserformV1EditManageuserWithHttpInfo($id, string $contentType = self::contentTypes['getAppWebUserformV1EditManageuser'][0])
    {
        $request = $this->getAppWebUserformV1EditManageuserRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getAppWebUserformV1EditManageuserAsync
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebUserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebUserformV1EditManageuserAsync($id, string $contentType = self::contentTypes['getAppWebUserformV1EditManageuser'][0])
    {
        return $this->getAppWebUserformV1EditManageuserAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAppWebUserformV1EditManageuserAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebUserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAppWebUserformV1EditManageuserAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getAppWebUserformV1EditManageuser'][0])
    {
        $returnType = '';
        $request = $this->getAppWebUserformV1EditManageuserRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAppWebUserformV1EditManageuser'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAppWebUserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAppWebUserformV1EditManageuserRequest($id, string $contentType = self::contentTypes['getAppWebUserformV1EditManageuser'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAppWebUserformV1EditManageuser'
            );
        }


        $resourcePath = '/api/v1/update-user/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchAppWebPhoneuserformV1EditManageuser
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebPhoneuserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function patchAppWebPhoneuserformV1EditManageuser($id, string $contentType = self::contentTypes['patchAppWebPhoneuserformV1EditManageuser'][0])
    {
        $this->patchAppWebPhoneuserformV1EditManageuserWithHttpInfo($id, $contentType);
    }

    /**
     * Operation patchAppWebPhoneuserformV1EditManageuserWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebPhoneuserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAppWebPhoneuserformV1EditManageuserWithHttpInfo($id, string $contentType = self::contentTypes['patchAppWebPhoneuserformV1EditManageuser'][0])
    {
        $request = $this->patchAppWebPhoneuserformV1EditManageuserRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation patchAppWebPhoneuserformV1EditManageuserAsync
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebPhoneuserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAppWebPhoneuserformV1EditManageuserAsync($id, string $contentType = self::contentTypes['patchAppWebPhoneuserformV1EditManageuser'][0])
    {
        return $this->patchAppWebPhoneuserformV1EditManageuserAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchAppWebPhoneuserformV1EditManageuserAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebPhoneuserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAppWebPhoneuserformV1EditManageuserAsyncWithHttpInfo($id, string $contentType = self::contentTypes['patchAppWebPhoneuserformV1EditManageuser'][0])
    {
        $returnType = '';
        $request = $this->patchAppWebPhoneuserformV1EditManageuserRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchAppWebPhoneuserformV1EditManageuser'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebPhoneuserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchAppWebPhoneuserformV1EditManageuserRequest($id, string $contentType = self::contentTypes['patchAppWebPhoneuserformV1EditManageuser'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchAppWebPhoneuserformV1EditManageuser'
            );
        }


        $resourcePath = '/api/v1/update-phone-user/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchAppWebUpdateuserloginV1Invoke
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebUpdateuserloginV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function patchAppWebUpdateuserloginV1Invoke($id, string $contentType = self::contentTypes['patchAppWebUpdateuserloginV1Invoke'][0])
    {
        $this->patchAppWebUpdateuserloginV1InvokeWithHttpInfo($id, $contentType);
    }

    /**
     * Operation patchAppWebUpdateuserloginV1InvokeWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebUpdateuserloginV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAppWebUpdateuserloginV1InvokeWithHttpInfo($id, string $contentType = self::contentTypes['patchAppWebUpdateuserloginV1Invoke'][0])
    {
        $request = $this->patchAppWebUpdateuserloginV1InvokeRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation patchAppWebUpdateuserloginV1InvokeAsync
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebUpdateuserloginV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAppWebUpdateuserloginV1InvokeAsync($id, string $contentType = self::contentTypes['patchAppWebUpdateuserloginV1Invoke'][0])
    {
        return $this->patchAppWebUpdateuserloginV1InvokeAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchAppWebUpdateuserloginV1InvokeAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebUpdateuserloginV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAppWebUpdateuserloginV1InvokeAsyncWithHttpInfo($id, string $contentType = self::contentTypes['patchAppWebUpdateuserloginV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->patchAppWebUpdateuserloginV1InvokeRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchAppWebUpdateuserloginV1Invoke'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebUpdateuserloginV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchAppWebUpdateuserloginV1InvokeRequest($id, string $contentType = self::contentTypes['patchAppWebUpdateuserloginV1Invoke'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchAppWebUpdateuserloginV1Invoke'
            );
        }


        $resourcePath = '/api/v1/user/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchAppWebUserformV1EditManageuser
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebUserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function patchAppWebUserformV1EditManageuser($id, string $contentType = self::contentTypes['patchAppWebUserformV1EditManageuser'][0])
    {
        $this->patchAppWebUserformV1EditManageuserWithHttpInfo($id, $contentType);
    }

    /**
     * Operation patchAppWebUserformV1EditManageuserWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebUserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchAppWebUserformV1EditManageuserWithHttpInfo($id, string $contentType = self::contentTypes['patchAppWebUserformV1EditManageuser'][0])
    {
        $request = $this->patchAppWebUserformV1EditManageuserRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation patchAppWebUserformV1EditManageuserAsync
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebUserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAppWebUserformV1EditManageuserAsync($id, string $contentType = self::contentTypes['patchAppWebUserformV1EditManageuser'][0])
    {
        return $this->patchAppWebUserformV1EditManageuserAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchAppWebUserformV1EditManageuserAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebUserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchAppWebUserformV1EditManageuserAsyncWithHttpInfo($id, string $contentType = self::contentTypes['patchAppWebUserformV1EditManageuser'][0])
    {
        $returnType = '';
        $request = $this->patchAppWebUserformV1EditManageuserRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchAppWebUserformV1EditManageuser'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchAppWebUserformV1EditManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchAppWebUserformV1EditManageuserRequest($id, string $contentType = self::contentTypes['patchAppWebUserformV1EditManageuser'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchAppWebUserformV1EditManageuser'
            );
        }


        $resourcePath = '/api/v1/update-user/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAppWebAddfollowersV1Invoke
     *
     * @param  string $id id (required)
     * @param  \OpenAPI\Client\Model\AddFollowersDTO $add_followers_dto add_followers_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebAddfollowersV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postAppWebAddfollowersV1Invoke($id, $add_followers_dto, string $contentType = self::contentTypes['postAppWebAddfollowersV1Invoke'][0])
    {
        $this->postAppWebAddfollowersV1InvokeWithHttpInfo($id, $add_followers_dto, $contentType);
    }

    /**
     * Operation postAppWebAddfollowersV1InvokeWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\AddFollowersDTO $add_followers_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebAddfollowersV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAppWebAddfollowersV1InvokeWithHttpInfo($id, $add_followers_dto, string $contentType = self::contentTypes['postAppWebAddfollowersV1Invoke'][0])
    {
        $request = $this->postAppWebAddfollowersV1InvokeRequest($id, $add_followers_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postAppWebAddfollowersV1InvokeAsync
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\AddFollowersDTO $add_followers_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebAddfollowersV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebAddfollowersV1InvokeAsync($id, $add_followers_dto, string $contentType = self::contentTypes['postAppWebAddfollowersV1Invoke'][0])
    {
        return $this->postAppWebAddfollowersV1InvokeAsyncWithHttpInfo($id, $add_followers_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAppWebAddfollowersV1InvokeAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\AddFollowersDTO $add_followers_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebAddfollowersV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebAddfollowersV1InvokeAsyncWithHttpInfo($id, $add_followers_dto, string $contentType = self::contentTypes['postAppWebAddfollowersV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->postAppWebAddfollowersV1InvokeRequest($id, $add_followers_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAppWebAddfollowersV1Invoke'
     *
     * @param  string $id (required)
     * @param  \OpenAPI\Client\Model\AddFollowersDTO $add_followers_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebAddfollowersV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAppWebAddfollowersV1InvokeRequest($id, $add_followers_dto, string $contentType = self::contentTypes['postAppWebAddfollowersV1Invoke'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postAppWebAddfollowersV1Invoke'
            );
        }
        if (!preg_match("/\\d+/", $id)) {
            throw new \InvalidArgumentException("invalid value for \"id\" when calling DefaultApi.postAppWebAddfollowersV1Invoke, must conform to the pattern /\\d+/.");
        }
        
        // verify the required parameter 'add_followers_dto' is set
        if ($add_followers_dto === null || (is_array($add_followers_dto) && count($add_followers_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_followers_dto when calling postAppWebAddfollowersV1Invoke'
            );
        }


        $resourcePath = '/api/v1/add-followers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_followers_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_followers_dto));
            } else {
                $httpBody = $add_followers_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAppWebCreatesubscriptionV1Invoke
     *
     * @param  string $author author (required)
     * @param  string $follower follower (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreatesubscriptionV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postAppWebCreatesubscriptionV1Invoke($author, $follower, string $contentType = self::contentTypes['postAppWebCreatesubscriptionV1Invoke'][0])
    {
        $this->postAppWebCreatesubscriptionV1InvokeWithHttpInfo($author, $follower, $contentType);
    }

    /**
     * Operation postAppWebCreatesubscriptionV1InvokeWithHttpInfo
     *
     * @param  string $author (required)
     * @param  string $follower (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreatesubscriptionV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAppWebCreatesubscriptionV1InvokeWithHttpInfo($author, $follower, string $contentType = self::contentTypes['postAppWebCreatesubscriptionV1Invoke'][0])
    {
        $request = $this->postAppWebCreatesubscriptionV1InvokeRequest($author, $follower, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postAppWebCreatesubscriptionV1InvokeAsync
     *
     * @param  string $author (required)
     * @param  string $follower (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreatesubscriptionV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebCreatesubscriptionV1InvokeAsync($author, $follower, string $contentType = self::contentTypes['postAppWebCreatesubscriptionV1Invoke'][0])
    {
        return $this->postAppWebCreatesubscriptionV1InvokeAsyncWithHttpInfo($author, $follower, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAppWebCreatesubscriptionV1InvokeAsyncWithHttpInfo
     *
     * @param  string $author (required)
     * @param  string $follower (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreatesubscriptionV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebCreatesubscriptionV1InvokeAsyncWithHttpInfo($author, $follower, string $contentType = self::contentTypes['postAppWebCreatesubscriptionV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->postAppWebCreatesubscriptionV1InvokeRequest($author, $follower, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAppWebCreatesubscriptionV1Invoke'
     *
     * @param  string $author (required)
     * @param  string $follower (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreatesubscriptionV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAppWebCreatesubscriptionV1InvokeRequest($author, $follower, string $contentType = self::contentTypes['postAppWebCreatesubscriptionV1Invoke'][0])
    {

        // verify the required parameter 'author' is set
        if ($author === null || (is_array($author) && count($author) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $author when calling postAppWebCreatesubscriptionV1Invoke'
            );
        }
        if (!preg_match("/\\d+/", $author)) {
            throw new \InvalidArgumentException("invalid value for \"author\" when calling DefaultApi.postAppWebCreatesubscriptionV1Invoke, must conform to the pattern /\\d+/.");
        }
        
        // verify the required parameter 'follower' is set
        if ($follower === null || (is_array($follower) && count($follower) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $follower when calling postAppWebCreatesubscriptionV1Invoke'
            );
        }
        if (!preg_match("/\\d+/", $follower)) {
            throw new \InvalidArgumentException("invalid value for \"follower\" when calling DefaultApi.postAppWebCreatesubscriptionV1Invoke, must conform to the pattern /\\d+/.");
        }
        

        $resourcePath = '/api/v1/create-subscription/{author}/{follower}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($author !== null) {
            $resourcePath = str_replace(
                '{' . 'author' . '}',
                ObjectSerializer::toPathValue($author),
                $resourcePath
            );
        }
        // path params
        if ($follower !== null) {
            $resourcePath = str_replace(
                '{' . 'follower' . '}',
                ObjectSerializer::toPathValue($follower),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAppWebCreateuserV1Invoke
     *
     * @param  \OpenAPI\Client\Model\CreateUserDTO $create_user_dto create_user_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreateuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postAppWebCreateuserV1Invoke($create_user_dto, string $contentType = self::contentTypes['postAppWebCreateuserV1Invoke'][0])
    {
        $this->postAppWebCreateuserV1InvokeWithHttpInfo($create_user_dto, $contentType);
    }

    /**
     * Operation postAppWebCreateuserV1InvokeWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\CreateUserDTO $create_user_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreateuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAppWebCreateuserV1InvokeWithHttpInfo($create_user_dto, string $contentType = self::contentTypes['postAppWebCreateuserV1Invoke'][0])
    {
        $request = $this->postAppWebCreateuserV1InvokeRequest($create_user_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postAppWebCreateuserV1InvokeAsync
     *
     * @param  \OpenAPI\Client\Model\CreateUserDTO $create_user_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreateuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebCreateuserV1InvokeAsync($create_user_dto, string $contentType = self::contentTypes['postAppWebCreateuserV1Invoke'][0])
    {
        return $this->postAppWebCreateuserV1InvokeAsyncWithHttpInfo($create_user_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAppWebCreateuserV1InvokeAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\CreateUserDTO $create_user_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreateuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebCreateuserV1InvokeAsyncWithHttpInfo($create_user_dto, string $contentType = self::contentTypes['postAppWebCreateuserV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->postAppWebCreateuserV1InvokeRequest($create_user_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAppWebCreateuserV1Invoke'
     *
     * @param  \OpenAPI\Client\Model\CreateUserDTO $create_user_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreateuserV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAppWebCreateuserV1InvokeRequest($create_user_dto, string $contentType = self::contentTypes['postAppWebCreateuserV1Invoke'][0])
    {

        // verify the required parameter 'create_user_dto' is set
        if ($create_user_dto === null || (is_array($create_user_dto) && count($create_user_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_user_dto when calling postAppWebCreateuserV1Invoke'
            );
        }


        $resourcePath = '/api/v1/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_user_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_user_dto));
            } else {
                $httpBody = $create_user_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAppWebCreateuserV2Invoke
     *
     * @param  \OpenAPI\Client\Model\CreateUserDTO2 $create_user_dto2 create_user_dto2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreateuserV2Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postAppWebCreateuserV2Invoke($create_user_dto2, string $contentType = self::contentTypes['postAppWebCreateuserV2Invoke'][0])
    {
        $this->postAppWebCreateuserV2InvokeWithHttpInfo($create_user_dto2, $contentType);
    }

    /**
     * Operation postAppWebCreateuserV2InvokeWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\CreateUserDTO2 $create_user_dto2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreateuserV2Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAppWebCreateuserV2InvokeWithHttpInfo($create_user_dto2, string $contentType = self::contentTypes['postAppWebCreateuserV2Invoke'][0])
    {
        $request = $this->postAppWebCreateuserV2InvokeRequest($create_user_dto2, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postAppWebCreateuserV2InvokeAsync
     *
     * @param  \OpenAPI\Client\Model\CreateUserDTO2 $create_user_dto2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreateuserV2Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebCreateuserV2InvokeAsync($create_user_dto2, string $contentType = self::contentTypes['postAppWebCreateuserV2Invoke'][0])
    {
        return $this->postAppWebCreateuserV2InvokeAsyncWithHttpInfo($create_user_dto2, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAppWebCreateuserV2InvokeAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\CreateUserDTO2 $create_user_dto2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreateuserV2Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebCreateuserV2InvokeAsyncWithHttpInfo($create_user_dto2, string $contentType = self::contentTypes['postAppWebCreateuserV2Invoke'][0])
    {
        $returnType = '';
        $request = $this->postAppWebCreateuserV2InvokeRequest($create_user_dto2, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAppWebCreateuserV2Invoke'
     *
     * @param  \OpenAPI\Client\Model\CreateUserDTO2 $create_user_dto2 (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebCreateuserV2Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAppWebCreateuserV2InvokeRequest($create_user_dto2, string $contentType = self::contentTypes['postAppWebCreateuserV2Invoke'][0])
    {

        // verify the required parameter 'create_user_dto2' is set
        if ($create_user_dto2 === null || (is_array($create_user_dto2) && count($create_user_dto2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_user_dto2 when calling postAppWebCreateuserV2Invoke'
            );
        }


        $resourcePath = '/api/v2/user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_user_dto2)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_user_dto2));
            } else {
                $httpBody = $create_user_dto2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAppWebGettokenV1Invoke
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebGettokenV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postAppWebGettokenV1Invoke(string $contentType = self::contentTypes['postAppWebGettokenV1Invoke'][0])
    {
        $this->postAppWebGettokenV1InvokeWithHttpInfo($contentType);
    }

    /**
     * Operation postAppWebGettokenV1InvokeWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebGettokenV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAppWebGettokenV1InvokeWithHttpInfo(string $contentType = self::contentTypes['postAppWebGettokenV1Invoke'][0])
    {
        $request = $this->postAppWebGettokenV1InvokeRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postAppWebGettokenV1InvokeAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebGettokenV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebGettokenV1InvokeAsync(string $contentType = self::contentTypes['postAppWebGettokenV1Invoke'][0])
    {
        return $this->postAppWebGettokenV1InvokeAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAppWebGettokenV1InvokeAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebGettokenV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebGettokenV1InvokeAsyncWithHttpInfo(string $contentType = self::contentTypes['postAppWebGettokenV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->postAppWebGettokenV1InvokeRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAppWebGettokenV1Invoke'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebGettokenV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAppWebGettokenV1InvokeRequest(string $contentType = self::contentTypes['postAppWebGettokenV1Invoke'][0])
    {


        $resourcePath = '/api/v1/get-token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAppWebPhoneuserformV1CreateManageuser
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebPhoneuserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postAppWebPhoneuserformV1CreateManageuser(string $contentType = self::contentTypes['postAppWebPhoneuserformV1CreateManageuser'][0])
    {
        $this->postAppWebPhoneuserformV1CreateManageuserWithHttpInfo($contentType);
    }

    /**
     * Operation postAppWebPhoneuserformV1CreateManageuserWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebPhoneuserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAppWebPhoneuserformV1CreateManageuserWithHttpInfo(string $contentType = self::contentTypes['postAppWebPhoneuserformV1CreateManageuser'][0])
    {
        $request = $this->postAppWebPhoneuserformV1CreateManageuserRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postAppWebPhoneuserformV1CreateManageuserAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebPhoneuserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebPhoneuserformV1CreateManageuserAsync(string $contentType = self::contentTypes['postAppWebPhoneuserformV1CreateManageuser'][0])
    {
        return $this->postAppWebPhoneuserformV1CreateManageuserAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAppWebPhoneuserformV1CreateManageuserAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebPhoneuserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebPhoneuserformV1CreateManageuserAsyncWithHttpInfo(string $contentType = self::contentTypes['postAppWebPhoneuserformV1CreateManageuser'][0])
    {
        $returnType = '';
        $request = $this->postAppWebPhoneuserformV1CreateManageuserRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAppWebPhoneuserformV1CreateManageuser'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebPhoneuserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAppWebPhoneuserformV1CreateManageuserRequest(string $contentType = self::contentTypes['postAppWebPhoneuserformV1CreateManageuser'][0])
    {


        $resourcePath = '/api/v1/create-phone-user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAppWebPosttweetV1Invoke
     *
     * @param  \OpenAPI\Client\Model\PostTweetDTO $post_tweet_dto post_tweet_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebPosttweetV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postAppWebPosttweetV1Invoke($post_tweet_dto, string $contentType = self::contentTypes['postAppWebPosttweetV1Invoke'][0])
    {
        $this->postAppWebPosttweetV1InvokeWithHttpInfo($post_tweet_dto, $contentType);
    }

    /**
     * Operation postAppWebPosttweetV1InvokeWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\PostTweetDTO $post_tweet_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebPosttweetV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAppWebPosttweetV1InvokeWithHttpInfo($post_tweet_dto, string $contentType = self::contentTypes['postAppWebPosttweetV1Invoke'][0])
    {
        $request = $this->postAppWebPosttweetV1InvokeRequest($post_tweet_dto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postAppWebPosttweetV1InvokeAsync
     *
     * @param  \OpenAPI\Client\Model\PostTweetDTO $post_tweet_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebPosttweetV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebPosttweetV1InvokeAsync($post_tweet_dto, string $contentType = self::contentTypes['postAppWebPosttweetV1Invoke'][0])
    {
        return $this->postAppWebPosttweetV1InvokeAsyncWithHttpInfo($post_tweet_dto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAppWebPosttweetV1InvokeAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\PostTweetDTO $post_tweet_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebPosttweetV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebPosttweetV1InvokeAsyncWithHttpInfo($post_tweet_dto, string $contentType = self::contentTypes['postAppWebPosttweetV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->postAppWebPosttweetV1InvokeRequest($post_tweet_dto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAppWebPosttweetV1Invoke'
     *
     * @param  \OpenAPI\Client\Model\PostTweetDTO $post_tweet_dto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebPosttweetV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAppWebPosttweetV1InvokeRequest($post_tweet_dto, string $contentType = self::contentTypes['postAppWebPosttweetV1Invoke'][0])
    {

        // verify the required parameter 'post_tweet_dto' is set
        if ($post_tweet_dto === null || (is_array($post_tweet_dto) && count($post_tweet_dto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_tweet_dto when calling postAppWebPosttweetV1Invoke'
            );
        }


        $resourcePath = '/api/v1/post-tweet';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_tweet_dto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_tweet_dto));
            } else {
                $httpBody = $post_tweet_dto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAppWebRefreshtokenV1Invoke
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebRefreshtokenV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postAppWebRefreshtokenV1Invoke(string $contentType = self::contentTypes['postAppWebRefreshtokenV1Invoke'][0])
    {
        $this->postAppWebRefreshtokenV1InvokeWithHttpInfo($contentType);
    }

    /**
     * Operation postAppWebRefreshtokenV1InvokeWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebRefreshtokenV1Invoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAppWebRefreshtokenV1InvokeWithHttpInfo(string $contentType = self::contentTypes['postAppWebRefreshtokenV1Invoke'][0])
    {
        $request = $this->postAppWebRefreshtokenV1InvokeRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postAppWebRefreshtokenV1InvokeAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebRefreshtokenV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebRefreshtokenV1InvokeAsync(string $contentType = self::contentTypes['postAppWebRefreshtokenV1Invoke'][0])
    {
        return $this->postAppWebRefreshtokenV1InvokeAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAppWebRefreshtokenV1InvokeAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebRefreshtokenV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebRefreshtokenV1InvokeAsyncWithHttpInfo(string $contentType = self::contentTypes['postAppWebRefreshtokenV1Invoke'][0])
    {
        $returnType = '';
        $request = $this->postAppWebRefreshtokenV1InvokeRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAppWebRefreshtokenV1Invoke'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebRefreshtokenV1Invoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAppWebRefreshtokenV1InvokeRequest(string $contentType = self::contentTypes['postAppWebRefreshtokenV1Invoke'][0])
    {


        $resourcePath = '/api/v1/refresh-token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAppWebUpdateuseravatarlinkV1Getuserbylogin
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebUpdateuseravatarlinkV1Getuserbylogin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postAppWebUpdateuseravatarlinkV1Getuserbylogin($id, string $contentType = self::contentTypes['postAppWebUpdateuseravatarlinkV1Getuserbylogin'][0])
    {
        $this->postAppWebUpdateuseravatarlinkV1GetuserbyloginWithHttpInfo($id, $contentType);
    }

    /**
     * Operation postAppWebUpdateuseravatarlinkV1GetuserbyloginWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebUpdateuseravatarlinkV1Getuserbylogin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAppWebUpdateuseravatarlinkV1GetuserbyloginWithHttpInfo($id, string $contentType = self::contentTypes['postAppWebUpdateuseravatarlinkV1Getuserbylogin'][0])
    {
        $request = $this->postAppWebUpdateuseravatarlinkV1GetuserbyloginRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postAppWebUpdateuseravatarlinkV1GetuserbyloginAsync
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebUpdateuseravatarlinkV1Getuserbylogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebUpdateuseravatarlinkV1GetuserbyloginAsync($id, string $contentType = self::contentTypes['postAppWebUpdateuseravatarlinkV1Getuserbylogin'][0])
    {
        return $this->postAppWebUpdateuseravatarlinkV1GetuserbyloginAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAppWebUpdateuseravatarlinkV1GetuserbyloginAsyncWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebUpdateuseravatarlinkV1Getuserbylogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebUpdateuseravatarlinkV1GetuserbyloginAsyncWithHttpInfo($id, string $contentType = self::contentTypes['postAppWebUpdateuseravatarlinkV1Getuserbylogin'][0])
    {
        $returnType = '';
        $request = $this->postAppWebUpdateuseravatarlinkV1GetuserbyloginRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAppWebUpdateuseravatarlinkV1Getuserbylogin'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebUpdateuseravatarlinkV1Getuserbylogin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAppWebUpdateuseravatarlinkV1GetuserbyloginRequest($id, string $contentType = self::contentTypes['postAppWebUpdateuseravatarlinkV1Getuserbylogin'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postAppWebUpdateuseravatarlinkV1Getuserbylogin'
            );
        }


        $resourcePath = '/api/v1/update-user-avatar-link/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAppWebUserformV1CreateManageuser
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebUserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postAppWebUserformV1CreateManageuser(string $contentType = self::contentTypes['postAppWebUserformV1CreateManageuser'][0])
    {
        $this->postAppWebUserformV1CreateManageuserWithHttpInfo($contentType);
    }

    /**
     * Operation postAppWebUserformV1CreateManageuserWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebUserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAppWebUserformV1CreateManageuserWithHttpInfo(string $contentType = self::contentTypes['postAppWebUserformV1CreateManageuser'][0])
    {
        $request = $this->postAppWebUserformV1CreateManageuserRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postAppWebUserformV1CreateManageuserAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebUserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebUserformV1CreateManageuserAsync(string $contentType = self::contentTypes['postAppWebUserformV1CreateManageuser'][0])
    {
        return $this->postAppWebUserformV1CreateManageuserAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAppWebUserformV1CreateManageuserAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebUserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAppWebUserformV1CreateManageuserAsyncWithHttpInfo(string $contentType = self::contentTypes['postAppWebUserformV1CreateManageuser'][0])
    {
        $returnType = '';
        $request = $this->postAppWebUserformV1CreateManageuserRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAppWebUserformV1CreateManageuser'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postAppWebUserformV1CreateManageuser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postAppWebUserformV1CreateManageuserRequest(string $contentType = self::contentTypes['postAppWebUserformV1CreateManageuser'][0])
    {


        $resourcePath = '/api/v1/create-user';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
