<?php
/**
 * PhoneUserJsonld
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My App
 *
 * This is an awesome app!
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PhoneUserJsonld Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PhoneUserJsonld implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PhoneUser.jsonld';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'at_context' => '\OpenAPI\Client\Model\PhoneUserJsonldContext',
        'at_id' => 'string',
        'at_type' => 'string',
        'phone' => 'string',
        'id' => '\OpenAPI\Client\Model\PhoneUserId',
        'login' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'tweets' => '\OpenAPI\Client\Model\TweetJsonld[]',
        'authors' => 'string[]',
        'followers' => 'string[]',
        'subscription_authors' => 'string[]',
        'subscription_followers' => 'string[]',
        'deleted_at' => 'mixed',
        'avatar_link' => 'mixed',
        'password' => 'string',
        'age' => 'int',
        'is_active' => 'bool',
        'roles' => 'string[]',
        'token' => 'mixed',
        'is_protected' => 'mixed',
        'deleted_at_in_future' => 'string',
        'active' => 'bool',
        'user_identifier' => 'string',
        'protected' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'at_context' => null,
        'at_id' => null,
        'at_type' => null,
        'phone' => null,
        'id' => null,
        'login' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'tweets' => null,
        'authors' => 'iri-reference',
        'followers' => 'iri-reference',
        'subscription_authors' => 'iri-reference',
        'subscription_followers' => 'iri-reference',
        'deleted_at' => 'date-time',
        'avatar_link' => null,
        'password' => null,
        'age' => null,
        'is_active' => null,
        'roles' => null,
        'token' => null,
        'is_protected' => null,
        'deleted_at_in_future' => 'duration',
        'active' => null,
        'user_identifier' => null,
        'protected' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'at_context' => false,
        'at_id' => false,
        'at_type' => false,
        'phone' => false,
        'id' => false,
        'login' => false,
        'created_at' => false,
        'updated_at' => false,
        'tweets' => false,
        'authors' => false,
        'followers' => false,
        'subscription_authors' => false,
        'subscription_followers' => false,
        'deleted_at' => true,
        'avatar_link' => true,
        'password' => false,
        'age' => false,
        'is_active' => false,
        'roles' => false,
        'token' => true,
        'is_protected' => true,
        'deleted_at_in_future' => false,
        'active' => false,
        'user_identifier' => false,
        'protected' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'at_context' => '@context',
        'at_id' => '@id',
        'at_type' => '@type',
        'phone' => 'phone',
        'id' => 'id',
        'login' => 'login',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'tweets' => 'tweets',
        'authors' => 'authors',
        'followers' => 'followers',
        'subscription_authors' => 'subscriptionAuthors',
        'subscription_followers' => 'subscriptionFollowers',
        'deleted_at' => 'deletedAt',
        'avatar_link' => 'avatarLink',
        'password' => 'password',
        'age' => 'age',
        'is_active' => 'isActive',
        'roles' => 'roles',
        'token' => 'token',
        'is_protected' => 'isProtected',
        'deleted_at_in_future' => 'deletedAtInFuture',
        'active' => 'active',
        'user_identifier' => 'userIdentifier',
        'protected' => 'protected'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'at_context' => 'setAtContext',
        'at_id' => 'setAtId',
        'at_type' => 'setAtType',
        'phone' => 'setPhone',
        'id' => 'setId',
        'login' => 'setLogin',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'tweets' => 'setTweets',
        'authors' => 'setAuthors',
        'followers' => 'setFollowers',
        'subscription_authors' => 'setSubscriptionAuthors',
        'subscription_followers' => 'setSubscriptionFollowers',
        'deleted_at' => 'setDeletedAt',
        'avatar_link' => 'setAvatarLink',
        'password' => 'setPassword',
        'age' => 'setAge',
        'is_active' => 'setIsActive',
        'roles' => 'setRoles',
        'token' => 'setToken',
        'is_protected' => 'setIsProtected',
        'deleted_at_in_future' => 'setDeletedAtInFuture',
        'active' => 'setActive',
        'user_identifier' => 'setUserIdentifier',
        'protected' => 'setProtected'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'at_context' => 'getAtContext',
        'at_id' => 'getAtId',
        'at_type' => 'getAtType',
        'phone' => 'getPhone',
        'id' => 'getId',
        'login' => 'getLogin',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'tweets' => 'getTweets',
        'authors' => 'getAuthors',
        'followers' => 'getFollowers',
        'subscription_authors' => 'getSubscriptionAuthors',
        'subscription_followers' => 'getSubscriptionFollowers',
        'deleted_at' => 'getDeletedAt',
        'avatar_link' => 'getAvatarLink',
        'password' => 'getPassword',
        'age' => 'getAge',
        'is_active' => 'getIsActive',
        'roles' => 'getRoles',
        'token' => 'getToken',
        'is_protected' => 'getIsProtected',
        'deleted_at_in_future' => 'getDeletedAtInFuture',
        'active' => 'getActive',
        'user_identifier' => 'getUserIdentifier',
        'protected' => 'getProtected'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('at_context', $data ?? [], null);
        $this->setIfExists('at_id', $data ?? [], null);
        $this->setIfExists('at_type', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('login', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('tweets', $data ?? [], null);
        $this->setIfExists('authors', $data ?? [], null);
        $this->setIfExists('followers', $data ?? [], null);
        $this->setIfExists('subscription_authors', $data ?? [], null);
        $this->setIfExists('subscription_followers', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('avatar_link', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('age', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('is_protected', $data ?? [], null);
        $this->setIfExists('deleted_at_in_future', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('user_identifier', $data ?? [], null);
        $this->setIfExists('protected', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets at_context
     *
     * @return \OpenAPI\Client\Model\PhoneUserJsonldContext|null
     */
    public function getAtContext()
    {
        return $this->container['at_context'];
    }

    /**
     * Sets at_context
     *
     * @param \OpenAPI\Client\Model\PhoneUserJsonldContext|null $at_context at_context
     *
     * @return self
     */
    public function setAtContext($at_context)
    {
        if (is_null($at_context)) {
            throw new \InvalidArgumentException('non-nullable at_context cannot be null');
        }
        $this->container['at_context'] = $at_context;

        return $this;
    }

    /**
     * Gets at_id
     *
     * @return string|null
     */
    public function getAtId()
    {
        return $this->container['at_id'];
    }

    /**
     * Sets at_id
     *
     * @param string|null $at_id at_id
     *
     * @return self
     */
    public function setAtId($at_id)
    {
        if (is_null($at_id)) {
            throw new \InvalidArgumentException('non-nullable at_id cannot be null');
        }
        $this->container['at_id'] = $at_id;

        return $this;
    }

    /**
     * Gets at_type
     *
     * @return string|null
     */
    public function getAtType()
    {
        return $this->container['at_type'];
    }

    /**
     * Sets at_type
     *
     * @param string|null $at_type at_type
     *
     * @return self
     */
    public function setAtType($at_type)
    {
        if (is_null($at_type)) {
            throw new \InvalidArgumentException('non-nullable at_type cannot be null');
        }
        $this->container['at_type'] = $at_type;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \OpenAPI\Client\Model\PhoneUserId|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \OpenAPI\Client\Model\PhoneUserId|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string|null
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string|null $login login
     *
     * @return self
     */
    public function setLogin($login)
    {
        if (is_null($login)) {
            throw new \InvalidArgumentException('non-nullable login cannot be null');
        }
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets tweets
     *
     * @return \OpenAPI\Client\Model\TweetJsonld[]|null
     */
    public function getTweets()
    {
        return $this->container['tweets'];
    }

    /**
     * Sets tweets
     *
     * @param \OpenAPI\Client\Model\TweetJsonld[]|null $tweets tweets
     *
     * @return self
     */
    public function setTweets($tweets)
    {
        if (is_null($tweets)) {
            throw new \InvalidArgumentException('non-nullable tweets cannot be null');
        }
        $this->container['tweets'] = $tweets;

        return $this;
    }

    /**
     * Gets authors
     *
     * @return string[]|null
     */
    public function getAuthors()
    {
        return $this->container['authors'];
    }

    /**
     * Sets authors
     *
     * @param string[]|null $authors authors
     *
     * @return self
     */
    public function setAuthors($authors)
    {
        if (is_null($authors)) {
            throw new \InvalidArgumentException('non-nullable authors cannot be null');
        }
        $this->container['authors'] = $authors;

        return $this;
    }

    /**
     * Gets followers
     *
     * @return string[]|null
     */
    public function getFollowers()
    {
        return $this->container['followers'];
    }

    /**
     * Sets followers
     *
     * @param string[]|null $followers followers
     *
     * @return self
     */
    public function setFollowers($followers)
    {
        if (is_null($followers)) {
            throw new \InvalidArgumentException('non-nullable followers cannot be null');
        }
        $this->container['followers'] = $followers;

        return $this;
    }

    /**
     * Gets subscription_authors
     *
     * @return string[]|null
     */
    public function getSubscriptionAuthors()
    {
        return $this->container['subscription_authors'];
    }

    /**
     * Sets subscription_authors
     *
     * @param string[]|null $subscription_authors subscription_authors
     *
     * @return self
     */
    public function setSubscriptionAuthors($subscription_authors)
    {
        if (is_null($subscription_authors)) {
            throw new \InvalidArgumentException('non-nullable subscription_authors cannot be null');
        }
        $this->container['subscription_authors'] = $subscription_authors;

        return $this;
    }

    /**
     * Gets subscription_followers
     *
     * @return string[]|null
     */
    public function getSubscriptionFollowers()
    {
        return $this->container['subscription_followers'];
    }

    /**
     * Sets subscription_followers
     *
     * @param string[]|null $subscription_followers subscription_followers
     *
     * @return self
     */
    public function setSubscriptionFollowers($subscription_followers)
    {
        if (is_null($subscription_followers)) {
            throw new \InvalidArgumentException('non-nullable subscription_followers cannot be null');
        }
        $this->container['subscription_followers'] = $subscription_followers;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return mixed|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param mixed|null $deleted_at deleted_at
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets avatar_link
     *
     * @return mixed|null
     */
    public function getAvatarLink()
    {
        return $this->container['avatar_link'];
    }

    /**
     * Sets avatar_link
     *
     * @param mixed|null $avatar_link avatar_link
     *
     * @return self
     */
    public function setAvatarLink($avatar_link)
    {
        if (is_null($avatar_link)) {
            array_push($this->openAPINullablesSetToNull, 'avatar_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['avatar_link'] = $avatar_link;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets age
     *
     * @return int|null
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int|null $age age
     *
     * @return self
     */
    public function setAge($age)
    {
        if (is_null($age)) {
            throw new \InvalidArgumentException('non-nullable age cannot be null');
        }
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return string[]|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param string[]|null $roles roles
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets token
     *
     * @return mixed|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param mixed|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            array_push($this->openAPINullablesSetToNull, 'token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets is_protected
     *
     * @return mixed|null
     */
    public function getIsProtected()
    {
        return $this->container['is_protected'];
    }

    /**
     * Sets is_protected
     *
     * @param mixed|null $is_protected is_protected
     *
     * @return self
     */
    public function setIsProtected($is_protected)
    {
        if (is_null($is_protected)) {
            array_push($this->openAPINullablesSetToNull, 'is_protected');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_protected', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_protected'] = $is_protected;

        return $this;
    }

    /**
     * Gets deleted_at_in_future
     *
     * @return string|null
     */
    public function getDeletedAtInFuture()
    {
        return $this->container['deleted_at_in_future'];
    }

    /**
     * Sets deleted_at_in_future
     *
     * @param string|null $deleted_at_in_future deleted_at_in_future
     *
     * @return self
     */
    public function setDeletedAtInFuture($deleted_at_in_future)
    {
        if (is_null($deleted_at_in_future)) {
            throw new \InvalidArgumentException('non-nullable deleted_at_in_future cannot be null');
        }
        $this->container['deleted_at_in_future'] = $deleted_at_in_future;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets user_identifier
     *
     * @return string|null
     */
    public function getUserIdentifier()
    {
        return $this->container['user_identifier'];
    }

    /**
     * Sets user_identifier
     *
     * @param string|null $user_identifier user_identifier
     *
     * @return self
     */
    public function setUserIdentifier($user_identifier)
    {
        if (is_null($user_identifier)) {
            throw new \InvalidArgumentException('non-nullable user_identifier cannot be null');
        }
        $this->container['user_identifier'] = $user_identifier;

        return $this;
    }

    /**
     * Gets protected
     *
     * @return bool|null
     */
    public function getProtected()
    {
        return $this->container['protected'];
    }

    /**
     * Sets protected
     *
     * @param bool|null $protected protected
     *
     * @return self
     */
    public function setProtected($protected)
    {
        if (is_null($protected)) {
            throw new \InvalidArgumentException('non-nullable protected cannot be null');
        }
        $this->container['protected'] = $protected;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


