/*
My App

This is an awesome app!

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TweetDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TweetDTO{}

// TweetDTO struct for TweetDTO
type TweetDTO struct {
	Id int32 `json:"id"`
	// Автор
	Author string `json:"author"`
	// Текст твита
	Text string `json:"text"`
	CreatedAt string `json:"createdAt"`
}

type _TweetDTO TweetDTO

// NewTweetDTO instantiates a new TweetDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTweetDTO(id int32, author string, text string, createdAt string) *TweetDTO {
	this := TweetDTO{}
	this.Id = id
	this.Author = author
	this.Text = text
	this.CreatedAt = createdAt
	return &this
}

// NewTweetDTOWithDefaults instantiates a new TweetDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTweetDTOWithDefaults() *TweetDTO {
	this := TweetDTO{}
	return &this
}

// GetId returns the Id field value
func (o *TweetDTO) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TweetDTO) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TweetDTO) SetId(v int32) {
	o.Id = v
}

// GetAuthor returns the Author field value
func (o *TweetDTO) GetAuthor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *TweetDTO) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *TweetDTO) SetAuthor(v string) {
	o.Author = v
}

// GetText returns the Text field value
func (o *TweetDTO) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TweetDTO) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TweetDTO) SetText(v string) {
	o.Text = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TweetDTO) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TweetDTO) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TweetDTO) SetCreatedAt(v string) {
	o.CreatedAt = v
}

func (o TweetDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TweetDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["author"] = o.Author
	toSerialize["text"] = o.Text
	toSerialize["createdAt"] = o.CreatedAt
	return toSerialize, nil
}

func (o *TweetDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"author",
		"text",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTweetDTO := _TweetDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTweetDTO)

	if err != nil {
		return err
	}

	*o = TweetDTO(varTweetDTO)

	return err
}

type NullableTweetDTO struct {
	value *TweetDTO
	isSet bool
}

func (v NullableTweetDTO) Get() *TweetDTO {
	return v.value
}

func (v *NullableTweetDTO) Set(val *TweetDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTweetDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTweetDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTweetDTO(val *TweetDTO) *NullableTweetDTO {
	return &NullableTweetDTO{value: val, isSet: true}
}

func (v NullableTweetDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTweetDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


