/*
My App

This is an awesome app!

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PhoneUserJsonldContextOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhoneUserJsonldContextOneOf{}

// PhoneUserJsonldContextOneOf struct for PhoneUserJsonldContextOneOf
type PhoneUserJsonldContextOneOf struct {
	Vocab string `json:"@vocab"`
	Hydra string `json:"hydra"`
	AdditionalProperties map[string]interface{}
}

type _PhoneUserJsonldContextOneOf PhoneUserJsonldContextOneOf

// NewPhoneUserJsonldContextOneOf instantiates a new PhoneUserJsonldContextOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhoneUserJsonldContextOneOf(vocab string, hydra string) *PhoneUserJsonldContextOneOf {
	this := PhoneUserJsonldContextOneOf{}
	this.Vocab = vocab
	this.Hydra = hydra
	return &this
}

// NewPhoneUserJsonldContextOneOfWithDefaults instantiates a new PhoneUserJsonldContextOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhoneUserJsonldContextOneOfWithDefaults() *PhoneUserJsonldContextOneOf {
	this := PhoneUserJsonldContextOneOf{}
	return &this
}

// GetVocab returns the Vocab field value
func (o *PhoneUserJsonldContextOneOf) GetVocab() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vocab
}

// GetVocabOk returns a tuple with the Vocab field value
// and a boolean to check if the value has been set.
func (o *PhoneUserJsonldContextOneOf) GetVocabOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vocab, true
}

// SetVocab sets field value
func (o *PhoneUserJsonldContextOneOf) SetVocab(v string) {
	o.Vocab = v
}

// GetHydra returns the Hydra field value
func (o *PhoneUserJsonldContextOneOf) GetHydra() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hydra
}

// GetHydraOk returns a tuple with the Hydra field value
// and a boolean to check if the value has been set.
func (o *PhoneUserJsonldContextOneOf) GetHydraOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hydra, true
}

// SetHydra sets field value
func (o *PhoneUserJsonldContextOneOf) SetHydra(v string) {
	o.Hydra = v
}

func (o PhoneUserJsonldContextOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhoneUserJsonldContextOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["@vocab"] = o.Vocab
	toSerialize["hydra"] = o.Hydra

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PhoneUserJsonldContextOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@vocab",
		"hydra",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPhoneUserJsonldContextOneOf := _PhoneUserJsonldContextOneOf{}

	err = json.Unmarshal(data, &varPhoneUserJsonldContextOneOf)

	if err != nil {
		return err
	}

	*o = PhoneUserJsonldContextOneOf(varPhoneUserJsonldContextOneOf)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "@vocab")
		delete(additionalProperties, "hydra")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePhoneUserJsonldContextOneOf struct {
	value *PhoneUserJsonldContextOneOf
	isSet bool
}

func (v NullablePhoneUserJsonldContextOneOf) Get() *PhoneUserJsonldContextOneOf {
	return v.value
}

func (v *NullablePhoneUserJsonldContextOneOf) Set(val *PhoneUserJsonldContextOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePhoneUserJsonldContextOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePhoneUserJsonldContextOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhoneUserJsonldContextOneOf(val *PhoneUserJsonldContextOneOf) *NullablePhoneUserJsonldContextOneOf {
	return &NullablePhoneUserJsonldContextOneOf{value: val, isSet: true}
}

func (v NullablePhoneUserJsonldContextOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhoneUserJsonldContextOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


