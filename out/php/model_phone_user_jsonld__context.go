/*
My App

This is an awesome app!

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// PhoneUserJsonldContext - struct for PhoneUserJsonldContext
type PhoneUserJsonldContext struct {
	PhoneUserJsonldContextOneOf *PhoneUserJsonldContextOneOf
	String *string
}

// PhoneUserJsonldContextOneOfAsPhoneUserJsonldContext is a convenience function that returns PhoneUserJsonldContextOneOf wrapped in PhoneUserJsonldContext
func PhoneUserJsonldContextOneOfAsPhoneUserJsonldContext(v *PhoneUserJsonldContextOneOf) PhoneUserJsonldContext {
	return PhoneUserJsonldContext{
		PhoneUserJsonldContextOneOf: v,
	}
}

// stringAsPhoneUserJsonldContext is a convenience function that returns string wrapped in PhoneUserJsonldContext
func StringAsPhoneUserJsonldContext(v *string) PhoneUserJsonldContext {
	return PhoneUserJsonldContext{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PhoneUserJsonldContext) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PhoneUserJsonldContextOneOf
	err = newStrictDecoder(data).Decode(&dst.PhoneUserJsonldContextOneOf)
	if err == nil {
		jsonPhoneUserJsonldContextOneOf, _ := json.Marshal(dst.PhoneUserJsonldContextOneOf)
		if string(jsonPhoneUserJsonldContextOneOf) == "{}" { // empty struct
			dst.PhoneUserJsonldContextOneOf = nil
		} else {
			if err = validator.Validate(dst.PhoneUserJsonldContextOneOf); err != nil {
				dst.PhoneUserJsonldContextOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.PhoneUserJsonldContextOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PhoneUserJsonldContextOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PhoneUserJsonldContext)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PhoneUserJsonldContext)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PhoneUserJsonldContext) MarshalJSON() ([]byte, error) {
	if src.PhoneUserJsonldContextOneOf != nil {
		return json.Marshal(&src.PhoneUserJsonldContextOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PhoneUserJsonldContext) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PhoneUserJsonldContextOneOf != nil {
		return obj.PhoneUserJsonldContextOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj PhoneUserJsonldContext) GetActualInstanceValue() (interface{}) {
	if obj.PhoneUserJsonldContextOneOf != nil {
		return *obj.PhoneUserJsonldContextOneOf
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullablePhoneUserJsonldContext struct {
	value *PhoneUserJsonldContext
	isSet bool
}

func (v NullablePhoneUserJsonldContext) Get() *PhoneUserJsonldContext {
	return v.value
}

func (v *NullablePhoneUserJsonldContext) Set(val *PhoneUserJsonldContext) {
	v.value = val
	v.isSet = true
}

func (v NullablePhoneUserJsonldContext) IsSet() bool {
	return v.isSet
}

func (v *NullablePhoneUserJsonldContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhoneUserJsonldContext(val *PhoneUserJsonldContext) *NullablePhoneUserJsonldContext {
	return &NullablePhoneUserJsonldContext{value: val, isSet: true}
}

func (v NullablePhoneUserJsonldContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhoneUserJsonldContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


