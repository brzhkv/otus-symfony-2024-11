security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Domain\Entity\User: auto
        Symfony\Component\Security\Core\User\InMemoryUser: plaintext
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
            memory:
                users:
                    admin:
                        password: 'my_pass'
                        roles: 'ROLE_ADMIN'
                    user:
                        password: 'other_pass'
                        roles: 'ROLE_USER'
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        refreshToken:
            pattern: ^/api/v1/refresh-token
            stateless: true
            custom_authenticator: App\Application\Security\ApiTokenAuthenticator
        token:
            pattern: ^/api/v1/get-token
            security: false
        apiPlatform:
            pattern: ^/api-platform$
            security: false
        main:
            http_basic:
            lazy: true
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/v2/user, roles: ROLE_ADMIN, methods: [ POST ] }
        - { path: ^/api/v1/user, roles: ROLE_ADMIN, methods: [DELETE] }
        - { path: ^/api/v1/get-user-list, roles: ROLE_VIEW, methods: [GET] }

    role_hierarchy:
        ROLE_ADMIN:
            - ROLE_VIEW
            - ROLE_GET_LIST

    access_decision_manager:
        strategy: consensus

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
